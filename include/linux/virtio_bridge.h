/*
 * Virtio QXL
 *
 *
 * Authors:
 *  Erlon R. Cruz <erlon.cruz@br.flextronics.com>
 *
 * This work is licensed under the terms of the GNU GPL, version 2.  See
 * the COPYING file in the top-level directory.
 *
 */

#ifndef VIRTIO_BRIDGE_H
#define VIRTIO_BRIDGE_H

#ifdef __KERNEL__
// Taken from spice-protocol
enum {
	QXL_IO_NOTIFY_CMD,
	QXL_IO_NOTIFY_CURSOR,
	QXL_IO_UPDATE_AREA,
	QXL_IO_UPDATE_IRQ,
	QXL_IO_NOTIFY_OOM,
	QXL_IO_RESET,
	QXL_IO_SET_MODE,	/* qxl-1 */
	QXL_IO_LOG,
	/* appended for qxl-2 */
	QXL_IO_MEMSLOT_ADD,
	QXL_IO_MEMSLOT_DEL,
	QXL_IO_DETACH_PRIMARY,
	QXL_IO_ATTACH_PRIMARY,
	QXL_IO_CREATE_PRIMARY,
	QXL_IO_DESTROY_PRIMARY,
	QXL_IO_DESTROY_SURFACE_WAIT,
	QXL_IO_DESTROY_ALL_SURFACES,
	/* appended for qxl-3 */
	QXL_IO_UPDATE_AREA_ASYNC,
	QXL_IO_MEMSLOT_ADD_ASYNC,
	QXL_IO_CREATE_PRIMARY_ASYNC,
	QXL_IO_DESTROY_PRIMARY_ASYNC,
	QXL_IO_DESTROY_SURFACE_ASYNC,
	QXL_IO_DESTROY_ALL_SURFACES_ASYNC,
	QXL_IO_FLUSH_SURFACES_ASYNC,
	QXL_IO_FLUSH_RELEASE,
	/* Append for virtioqxl */
	QXL_IO_UPDATE_ROM,
	QXL_IO_PUSH_AREA,
	QXL_IO_PULL_AREA,

	QXL_IO_RANGE_SIZE
};

//TODO: ifdebug
static const char *io_port_string[QXL_IO_RANGE_SIZE + 1] = {
	[QXL_IO_NOTIFY_CMD] = "QXL_IO_NOTIFY_CMD",
	[QXL_IO_NOTIFY_CURSOR] = "QXL_IO_NOTIFY_CURSOR",
	[QXL_IO_UPDATE_AREA] = "QXL_IO_UPDATE_AREA",
	[QXL_IO_UPDATE_IRQ] = "QXL_IO_UPDATE_IRQ",
	[QXL_IO_NOTIFY_OOM] = "QXL_IO_NOTIFY_OOM",
	[QXL_IO_RESET] = "QXL_IO_RESET",
	[QXL_IO_SET_MODE] = "QXL_IO_SET_MODE",
	[QXL_IO_LOG] = "QXL_IO_LOG",
	[QXL_IO_MEMSLOT_ADD] = "QXL_IO_MEMSLOT_ADD",
	[QXL_IO_MEMSLOT_DEL] = "QXL_IO_MEMSLOT_DEL",
	[QXL_IO_DETACH_PRIMARY] = "QXL_IO_DETACH_PRIMARY",
	[QXL_IO_ATTACH_PRIMARY] = "QXL_IO_ATTACH_PRIMARY",
	[QXL_IO_CREATE_PRIMARY] = "QXL_IO_CREATE_PRIMARY",
	[QXL_IO_DESTROY_PRIMARY] = "QXL_IO_DESTROY_PRIMARY",
	[QXL_IO_DESTROY_SURFACE_WAIT] = "QXL_IO_DESTROY_SURFACE_WAIT",
	[QXL_IO_DESTROY_ALL_SURFACES] = "QXL_IO_DESTROY_ALL_SURFACES",
	[QXL_IO_UPDATE_AREA_ASYNC] = "QXL_IO_UPDATE_AREA_ASYNC",
	[QXL_IO_MEMSLOT_ADD_ASYNC] = "QXL_IO_MEMSLOT_ADD_ASYNC",
	[QXL_IO_CREATE_PRIMARY_ASYNC] = "QXL_IO_CREATE_PRIMARY_ASYNC",
	[QXL_IO_DESTROY_PRIMARY_ASYNC] = "QXL_IO_DESTROY_PRIMARY_ASYNC",
	[QXL_IO_DESTROY_SURFACE_ASYNC] = "QXL_IO_DESTROY_SURFACE_ASYNC",
	[QXL_IO_DESTROY_ALL_SURFACES_ASYNC] =
	    "QXL_IO_DESTROY_ALL_SURFACES_ASYNC",
	[QXL_IO_FLUSH_SURFACES_ASYNC] = "QXL_IO_FLUSH_SURFACES_ASYNC",
	[QXL_IO_FLUSH_RELEASE] = "QXL_IO_FLUSH_RELEASE",
	[QXL_IO_UPDATE_ROM] = "QXL_IO_UPDATE_ROM",
	[QXL_IO_PUSH_AREA] = "QXL_IO_PUSH_AREA",
	[QXL_IO_PULL_AREA] = "QXL_IO_PULL_AREA"
};
#endif

#define QXLMAGIC 'v'

//TODO: change all this types to generic types __u32
struct qxl_ram_area {
	unsigned int offset;
	unsigned int len;
};

#define QXL_IOCTL_NOTIFY_CMD _IOW(QXLMAGIC, QXL_IO_NOTIFY_CMD, unsigned int)
#define QXL_IOCTL_NOTIFY_CURSOR _IOW(QXLMAGIC, QXL_IO_NOTIFY_CURSOR, unsigned int)
#define QXL_IOCTL_UPDATE_AREA _IOW(QXLMAGIC, QXL_IO_UPDATE_AREA, unsigned int)
#define QXL_IOCTL_UPDATE_IRQ _IOW(QXLMAGIC, QXL_IO_UPDATE_IRQ, unsigned int)
#define QXL_IOCTL_NOTIFY_OOM _IOW(QXLMAGIC, QXL_IO_NOTIFY_OOM, unsigned int)
#define QXL_IOCTL_RESET _IOW(QXLMAGIC, QXL_IO_RESET, unsigned int)
#define QXL_IOCTL_SET_MODE _IOW(QXLMAGIC, QXL_IO_SET_MODE, unsigned int)
#define QXL_IOCTL_LOG _IOW(QXLMAGIC, QXL_IO_LOG, unsigned int)
#define QXL_IOCTL_MEMSLOT_ADD _IOW(QXLMAGIC, QXL_IO_MEMSLOT_ADD, unsigned int)
#define QXL_IOCTL_MEMSLOT_DEL _IOW(QXLMAGIC, QXL_IO_MEMSLOT_DEL, unsigned int)
#define QXL_IOCTL_DETACH_PRIMARY _IOW(QXLMAGIC, QXL_IO_DETACH_PRIMARY, unsigned int)
#define QXL_IOCTL_ATTACH_PRIMARY _IOW(QXLMAGIC, QXL_IO_ATTACH_PRIMARY, unsigned int)
#define QXL_IOCTL_CREATE_PRIMARY _IOW(QXLMAGIC, QXL_IO_CREATE_PRIMARY, unsigned int)
#define QXL_IOCTL_DESTROY_PRIMARY _IOW(QXLMAGIC, QXL_IO_DESTROY_PRIMARY, unsigned int)
#define QXL_IOCTL_DESTROY_SURFACE_WAIT _IOW(QXLMAGIC, QXL_IO_DESTROY_SURFACE_WAIT, unsigned int)
#define QXL_IOCTL_DESTROY_ALL_SURFACES _IOW(QXLMAGIC, QXL_IO_DESTROY_ALL_SURFACES, unsigned int)
#define QXL_IOCTL_UPDATE_AREA_ASYNC _IOW(QXLMAGIC, QXL_IO_UPDATE_AREA_ASYNC, unsigned int)
#define QXL_IOCTL_MEMSLOT_ADD_ASYNC _IOW(QXLMAGIC, QXL_IO_MEMSLOT_ADD_ASYNC, unsigned int)
#define QXL_IOCTL_CREATE_PRIMARY_ASYNC _IOW(QXLMAGIC, QXL_IO_CREATE_PRIMARY_ASYNC, unsigned int)
#define QXL_IOCTL_DESTROY_PRIMARY_ASYNC _IOW(QXLMAGIC, QXL_IO_DESTROY_PRIMARY_ASYNC, unsigned int)
#define QXL_IOCTL_DESTROY_SURFACE_ASYNC _IOW(QXLMAGIC, QXL_IO_DESTROY_SURFACE_ASYNC, unsigned int)
#define QXL_IOCTL_DESTROY_ALL_SURFACES_ASYNC _IOW(QXLMAGIC, QXL_IO_DESTROY_ALL_SURFACES_ASYNC, unsigned int)
#define QXL_IOCTL_FLUSH_SURFACES_ASYNC _IOW(QXLMAGIC, QXL_IO_FLUSH_SURFACES_ASYNC, unsigned int)
#define QXL_IOCTL_FLUSH_RELEASE _IOW(QXLMAGIC, QXL_IO_FLUSH_RELEASE, unsigned int)
#define QXL_IOCTL_UPDATE_ROM _IOW(QXLMAGIC, QXL_IO_UPDATE_ROM, unsigned int)
#define QXL_IOCTL_QXL_IO_PUSH_AREA _IOW(QXLMAGIC, QXL_IO_PUSH_AREA, struct qxl_ram_area)
#define QXL_IOCTL_QXL_IO_PULL_AREA _IOW(QXLMAGIC, QXL_IO_PULL_AREA, struct qxl_ram_area)

/*Transport operations between guest kernel and host*/
enum {
	VIRTIOQXL_GETCFG,
	VIRTIOQXL_IOPORT_WRITE,
	VIRTIOQXL_GET_RAM,
	VIRTIOQXL_SET_RAM,
	VIRTIOQXL_GET_VRAM,
	VIRTIOQXL_SET_VRAM,
	VIRTIOQXL_GET_ROM,
	VIRTIOQXL_SET_ROM,
	VIRTIOQXL_CMD_RANGE
};

enum {
	VIRTIOQXL_STATUS_DONE,
	VIRTIOQXL_STATUS_ERROR,
	VIRTIOQXL_STATUS_RANGE
};

#define CONFIG_READ 0x00000001	// Read configs from the host device
#define CONFIG_WRITE 0x00000002	// Write configs on the host device

struct vbr_proto_hdr {
	unsigned int function;
	unsigned int flags;
	unsigned int param;	/* Parameter related var */
	unsigned int len;
};

struct iowrite_cmd {
	unsigned int port;
	unsigned int arg;
};

struct virtioqxl_config {
	unsigned int configsize;
	unsigned int ramsize;
	unsigned int vramsize;
	unsigned int romsize;
	unsigned int virtiomem[0];
};

#endif
